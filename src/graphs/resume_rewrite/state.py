from typing import TypedDict, Optional, Dict, Any


class GraphState(TypedDict):
    """
    Simplified flat state with clear field ownership and data flow.

    CONTEXT (Immutable):
        graph_type: Identifies this as "resume_rewrite" state
        user_id: Session user identifier
        job_id: Session job identifier

    INPUT DATA (Loaded by data_loader node):
        job_description: Raw job posting text
        original_resume: User's base resume content
        full_resume: User's complete resume with all details

    PROCESSING OUTPUTS (Generated by analysis nodes):
        job_strategy: Company analysis and hiring strategy (from job_analyzer)
        recruiter_feedback: Resume evaluation from recruiter perspective (from resume_screener)
        tailored_resume: Customized resume for the job (from resume_tailorer)

    ERROR HANDLING:
        error: Error message if processing fails
    """

    # Context (set once, never changes)
    graph_type: str  # Always "resume_rewrite" for this state
    user_id: str
    job_id: str

    # Input data (loaded by data_loader)
    job_description: Optional[str] = None
    original_resume: Optional[str] = None
    full_resume: Optional[str] = None

    # Processing pipeline outputs
    job_strategy: Optional[str] = None  # job_analyzer → resume_screener
    recruiter_feedback: Optional[str] = None  # resume_screener → resume_tailorer
    tailored_resume: Optional[str] = None  # resume_tailorer → END

    # Error handling
    error: Optional[str] = None


def create_initial_state(user_id: str, job_id: str) -> GraphState:
    """Create initial state with required context"""
    return {
        "graph_type": "resume_rewrite",
        "user_id": user_id,
        "job_id": job_id,
        "job_description": None,
        "original_resume": None,
        "full_resume": None,
        "job_strategy": None,
        "recruiter_feedback": None,
        "tailored_resume": None,
        "error": None,
    }


def set_error(error_msg: str) -> Dict[str, Any]:
    """Helper for setting error state"""
    return {"error": error_msg}


def clear_error() -> Dict[str, Any]:
    """Helper for clearing error state"""
    return {"error": None}
