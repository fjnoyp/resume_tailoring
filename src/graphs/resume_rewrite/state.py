from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field


class GraphState(BaseModel):
    """
    Simplified flat state with clear field ownership and data flow.

    CONTEXT (Immutable):
        graph_type: Identifies this as "resume_rewrite" state
        user_id: Session user identifier
        job_id: Session job identifier

    INPUT DATA (Loaded by data_loader node):
        job_description: Raw job posting text
        original_resume: User's base resume content
        full_resume: User's complete resume with all details

    PROCESSING OUTPUTS (Generated by analysis nodes):
        company_strategy: Company analysis and hiring strategy (from job_analyzer)
        recruiter_feedback: Resume evaluation from recruiter perspective (from resume_screener)
        missing_info: List of specific missing information for tailoring (from resume_tailorer)
        tailored_resume: Customized resume for the job (from resume_tailorer)

    ERROR HANDLING:
        error: Error message if processing fails
    """

    # Context (set once, never changes)
    user_id: str = Field(..., description="Session user identifier")
    job_id: str = Field(..., description="Session job identifier")

    # Input data (loaded by data_loader)
    job_description: Optional[str] = Field(None, description="Raw job posting text")
    original_resume: Optional[str] = Field(
        None, description="User's base resume content"
    )
    full_resume: Optional[str] = Field(
        None, description="User's complete resume with all details"
    )

    # Processing pipeline outputs
    company_strategy: Optional[str] = Field(
        None, description="Company analysis and hiring strategy"
    )
    recruiter_feedback: Optional[str] = Field(
        None, description="Resume evaluation from recruiter perspective"
    )
    missing_info: Optional[List[str]] = Field(
        None, description="Persistent context of missing information for tailoring"
    )
    tailored_resume: Optional[str] = Field(
        None, description="Customized resume for the job"
    )

    # Error handling
    error: Optional[str] = Field(None, description="Error message if processing fails")


def create_initial_state(user_id: str, job_id: str) -> GraphState:
    """Create initial state with required context"""
    return GraphState(
        user_id=user_id,
        job_id=job_id,
    )


def set_error(error_msg: str) -> Dict[str, Any]:
    """Helper for setting error state"""
    return {"error": error_msg}


def clear_error() -> Dict[str, Any]:
    """Helper for clearing error state"""
    return {"error": None}
